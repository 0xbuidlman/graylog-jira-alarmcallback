{"name":"Graylog Plugin for JIRA with templating","tagline":"Graylog plugin for JIRA with templating of JIRA issue title and JIRA issue message","body":"# Graylog Plugin for JIRA with templating\r\n\r\nA Graylog alarm callback plugin that integrates [Graylog](https://www.graylog.org/) into [JIRA](https://www.atlassian.com/software/jira/).\r\n\r\n## Main features\r\n* Templating in JIRA issue title and JIRA message via place holders\r\n* Embed a MD5 hash into the JIRA issue to prevent duplicate JIRA issues\r\n\r\n![Graylog JIRA plugin](https://raw.githubusercontent.com/magicdude4eva/graylog-jira-alarmcallback/master/screenshot-alert-config.png)\r\n\r\n# Pre-requisites for Java exception logging\r\nIf you use an application server such as Tomcat, we suggest that you use [Logstash](https://www.elastic.co/products/logstash) to pre-process your log-files and ship the log-records via Gelf output into Graylog.\r\n\r\nA very reliable way of processing Tomcat logs can be achieved by:\r\n \r\n* Using Logstash with `sincedb_path` and `sincedb_write_interval` \r\n* Use Log4J to consistently format log records to consist of `%{LOGLEVEL} %{timestamp} %{threadname} %{MESSAGE}`\r\n* Use a multi-line codec to extract exception messages\r\n* Use a series of grok patterns to retag multiline messages as \"exception\" you want a Graylog stream to process - i.e. `match => { message => [ \"(^.+Exception: .+)|(^.+Stacktrace:.+)\" ] }`\r\n* Discard and sanitize messages in Logstash - this will improve storage, filtering and stream processing\r\n\r\nWith the above you can easily setup a stream where your condition is as simple as \"`type must match exactly tomcat AND tags must match exactly exception`\"\r\n\r\n\r\nInstallation of plugin\r\n----------------------\r\nThis plugin has been tested with Graylog v1.3.3 and JIRA v7.0.10.\r\n\r\nDownload the [latest release](https://github.com/magicdude4eva/graylog-jira-alarmcallback/releases) and copy the `.jar` file into your Graylog plugin directory (default is in `/usr/share/graylog-server/plugin`).\r\nIf you are unsure about the plugin location, do a `grep -i plugin_dir /etc/graylog/server/server.conf`.\r\n\r\nRestart Graylog via `systemctl restart graylog-server`\r\n\r\nConfiguration\r\n-------------\r\n\r\n### Configure the stream alert\r\n![Graylog callback configuration](https://raw.githubusercontent.com/magicdude4eva/graylog-jira-alarmcallback/master/screenshot-plugin-overview.png)\r\n\r\n### Callback options\r\n* __JIRA Instance URL__: The URL to your JIRA server\r\n* __Project Key__: The project key under which the issue will be created in JIRA\r\n* __Issue Type__: The JIRA issue type (defaults to `Bug`). Ensure that the issue type matches your project settings\r\n* __Graylog URL__: The URL to the Graylog web-interface. The URL is used to generate links within JIRA\r\n* __Issue Priority__: The JIRA issue priority (defaults to `Minor`). Ensure that the issue priority matches your project settings\r\n* __Labels__: Comma-separated list of labels to add to the issue\r\n* __Message template__: Message template used to create a JIRA issue. The message template uses JIRA Text Formatting Notation. Line-breaks can be added as \"`\\n`\". The message-template also accepts `[PLACEHOLDERS]`\r\n  * __[STREAM_TITLE]__: Title of the stream\r\n  * __[STREAM_URL]__: URL to the stream\r\n  * __[STREAM_RULES]__: Stream rules triggered\r\n  * __[ALERT_TRIGGERED_AT]__: Timestamp when alert was triggered\r\n  * __[ALERT_TRIGGERED_CONDITION]__: Conditions triggering the alert\r\n  * __[LAST_MESSAGE.SOURCE]__: If a message is present, the placeholder will be replaced with the source origin of the message\r\n  * __[LAST_MESSAGE.MESSAGE]__: The actual message\r\n  * __[LAST_MESSAGE.FIELDNAME]__: Replaces with any field in the logged record. i.e. \"`[LAST_MESSAGE.PATH]`\" would display the full logpath where the message originated from.\r\n* __JIRA task title__: Sets the title of the JIRA task. Can include `[MESSAGE_REGEX]`(see __Message regex__). Can also include any field via `[LAST_MESSAGE.FIELDNAME]`\r\n* __Message regex__: A regular expression to extract a portion of the message. This is used to extract an exception message as well as to generate a MD5 hash to identify duplicate JIRA issues.\r\n  \r\n\r\n### Callback examples\r\n\r\nIf a log-message contains:\r\n```\r\nH/M 07/03/16 15:37:23 tcbobe-56 OrderStructureIO java.sql.SQLIntegrityConstraintViolationException: ORA-00001: unique constraint (PRODZA.ORDERS_PK) violated\r\nat oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:450)\r\nat oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:399)\r\nat oracle.jdbc.driver.T4C8Oall.processError(T4C8Oall.java:1059)\r\nat oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:522)\r\nat oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:257)\r\nat oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:587)\r\nat oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:225)\r\nat oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:53)\r\nat oracle.jdbc.driver.T4CPreparedStatement.executeForRows(T4CPreparedStatement.java:943)\r\nat oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1150)\r\nat oracle.jdbc.driver.OraclePreparedStatement.executeInternal(OraclePreparedStatement.java:4798)\r\nat oracle.jdbc.driver.OraclePreparedStatement.executeUpdate(OraclePreparedStatement.java:4875)\r\nat oracle.jdbc.driver.OraclePreparedStatementWrapper.executeUpdate(OraclePreparedStatementWrapper.java:1361)\r\n```\r\n\r\nWith the following settings:\r\n* __Message regex__ = `([a-zA-Z_.]+(?!.*Exception): .+)`\r\n* __JIRA task title__ = `[Graylog-[LAST_MESSAGE.SOURCE]] [MESSAGE_REGEX]` \r\n* __Message template__ = `*Alert triggered at:* \\n [ALERT_TRIGGERED_AT]\\n\\n *Stream URL:* \\n [STREAM_URL]\\n\\n*Source:* \\n [LAST_MESSAGE.SOURCE]\\n\\n *Message:* \\n [LAST_MESSAGE.MESSAGE]\\n\\n`\r\n\r\nThe JIRA issue will be logged follows:\r\n![JIRA issue](https://raw.githubusercontent.com/magicdude4eva/graylog-jira-alarmcallback/master/screenshot-jira.png)\r\n \r\n## Copyright\r\n\r\nOriginal idea from https://github.com/tjackiw/graylog-plugin-jira\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}